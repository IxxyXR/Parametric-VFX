// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var mathmodPresets = MathmodPresets.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class MathmodPresets
    {
        [JsonProperty("MathModels", NullValueHandling = NullValueHandling.Ignore)]
        public List<MathModel> MathModels { get; set; }

        [JsonProperty("TexturesList", NullValueHandling = NullValueHandling.Ignore)]
        public List<TexturesList> TexturesList { get; set; }

        [JsonProperty("PigmentsList", NullValueHandling = NullValueHandling.Ignore)]
        public List<PigmentsList> PigmentsList { get; set; }
    }

    public partial class MathModel
    {
        [JsonProperty("Param3D", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, List<string>> Param3D { get; set; }

        [JsonProperty("Texture", NullValueHandling = NullValueHandling.Ignore)]
        public Texture Texture { get; set; }

        [JsonProperty("Iso3D", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, List<string>> Iso3D { get; set; }

        [JsonProperty("Pigment", NullValueHandling = NullValueHandling.Ignore)]
        public MathModelPigment Pigment { get; set; }

        [JsonProperty("Noise", NullValueHandling = NullValueHandling.Ignore)]
        public string Noise { get; set; }

        [JsonProperty("Param4D", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, List<string>> Param4D { get; set; }

        [JsonProperty("Sliders", NullValueHandling = NullValueHandling.Ignore)]
        public Sliders Sliders { get; set; }
    }

    public partial class MathModelPigment
    {
        [JsonProperty("Colors", NullValueHandling = NullValueHandling.Ignore)]
        public List<ColorElement> Colors { get; set; }

        [JsonProperty("Gradient", NullValueHandling = NullValueHandling.Ignore)]
        public string Gradient { get; set; }
    }

    public partial class ColorElement
    {
        [JsonProperty("Color", NullValueHandling = NullValueHandling.Ignore)]
        public ColorColor Color { get; set; }
    }

    public partial class ColorColor
    {
        [JsonProperty("Name", NullValueHandling = NullValueHandling.Ignore)]
        public Name? Name { get; set; }

        [JsonProperty("Vrgba", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Vrgba { get; set; }
    }

    public partial class Sliders
    {
        [JsonProperty("Max", NullValueHandling = NullValueHandling.Ignore)]
        public List<MaxElement> Max { get; set; }

        [JsonProperty("Min", NullValueHandling = NullValueHandling.Ignore)]
        public List<MinElement> Min { get; set; }

        [JsonProperty("Name", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Name { get; set; }

        [JsonProperty("Position", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Position { get; set; }

        [JsonProperty("Step", NullValueHandling = NullValueHandling.Ignore)]
        public List<StepElement> Step { get; set; }

        [JsonProperty("SetNames", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> SetNames { get; set; }
    }

    public partial class Texture
    {
        [JsonProperty("Colors", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Colors { get; set; }

        [JsonProperty("Name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("Noise", NullValueHandling = NullValueHandling.Ignore)]
        public string Noise { get; set; }
    }

    public partial class PigmentsList
    {
        [JsonProperty("Pigment", NullValueHandling = NullValueHandling.Ignore)]
        public PigmentsListPigment Pigment { get; set; }

        [JsonProperty("Param3D", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, List<string>> Param3D { get; set; }

        [JsonProperty("Texture", NullValueHandling = NullValueHandling.Ignore)]
        public Texture Texture { get; set; }

        [JsonProperty("Sliders", NullValueHandling = NullValueHandling.Ignore)]
        public Sliders Sliders { get; set; }

        [JsonProperty("Iso3D", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, List<string>> Iso3D { get; set; }

        [JsonProperty("Param4D", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, List<string>> Param4D { get; set; }
    }

    public partial class PigmentsListPigment
    {
        [JsonProperty("Name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("Colors", NullValueHandling = NullValueHandling.Ignore)]
        public List<ColorElement> Colors { get; set; }

        [JsonProperty("Gradient", NullValueHandling = NullValueHandling.Ignore)]
        public string Gradient { get; set; }

        [JsonProperty("Noise", NullValueHandling = NullValueHandling.Ignore)]
        public string Noise { get; set; }
    }

    public partial class TexturesList
    {
        [JsonProperty("Texture", NullValueHandling = NullValueHandling.Ignore)]
        public Texture Texture { get; set; }
    }

    public enum Name { Red };

    public enum MaxEnum { The10, The20, The30 };

    public enum MinEnum { The0 };

    public enum StepEnum { The1 };

    public partial struct MaxElement
    {
        public MaxEnum? Enum;
        public long? Integer;

        public static implicit operator MaxElement(MaxEnum Enum) => new MaxElement { Enum = Enum };
        public static implicit operator MaxElement(long Integer) => new MaxElement { Integer = Integer };
    }

    public partial struct MinElement
    {
        public MinEnum? Enum;
        public long? Integer;

        public static implicit operator MinElement(MinEnum Enum) => new MinElement { Enum = Enum };
        public static implicit operator MinElement(long Integer) => new MinElement { Integer = Integer };
    }

    public partial struct StepElement
    {
        public StepEnum? Enum;
        public long? Integer;

        public static implicit operator StepElement(StepEnum Enum) => new StepElement { Enum = Enum };
        public static implicit operator StepElement(long Integer) => new StepElement { Integer = Integer };
    }

    public partial class MathmodPresets
    {
        public static MathmodPresets FromJson(string json) => JsonConvert.DeserializeObject<MathmodPresets>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this MathmodPresets self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                NameConverter.Singleton,
                MaxElementConverter.Singleton,
                MaxEnumConverter.Singleton,
                MinElementConverter.Singleton,
                MinEnumConverter.Singleton,
                StepElementConverter.Singleton,
                StepEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class NameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Name) || t == typeof(Name?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Red")
            {
                return Name.Red;
            }
            throw new Exception("Cannot unmarshal type Name");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Name)untypedValue;
            if (value == Name.Red)
            {
                serializer.Serialize(writer, "Red");
                return;
            }
            throw new Exception("Cannot marshal type Name");
        }

        public static readonly NameConverter Singleton = new NameConverter();
    }

    internal class MaxElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MaxElement) || t == typeof(MaxElement?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case " 10":
                            return new MaxElement { Enum = MaxEnum.The10 };
                        case " 20":
                            return new MaxElement { Enum = MaxEnum.The20 };
                        case " 30":
                            return new MaxElement { Enum = MaxEnum.The30 };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new MaxElement { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type MaxElement");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (MaxElement)untypedValue;
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case MaxEnum.The10:
                        serializer.Serialize(writer, " 10");
                        return;
                    case MaxEnum.The20:
                        serializer.Serialize(writer, " 20");
                        return;
                    case MaxEnum.The30:
                        serializer.Serialize(writer, " 30");
                        return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type MaxElement");
        }

        public static readonly MaxElementConverter Singleton = new MaxElementConverter();
    }

    internal class MaxEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MaxEnum) || t == typeof(MaxEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case " 10":
                    return MaxEnum.The10;
                case " 20":
                    return MaxEnum.The20;
                case " 30":
                    return MaxEnum.The30;
            }
            throw new Exception("Cannot unmarshal type MaxEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MaxEnum)untypedValue;
            switch (value)
            {
                case MaxEnum.The10:
                    serializer.Serialize(writer, " 10");
                    return;
                case MaxEnum.The20:
                    serializer.Serialize(writer, " 20");
                    return;
                case MaxEnum.The30:
                    serializer.Serialize(writer, " 30");
                    return;
            }
            throw new Exception("Cannot marshal type MaxEnum");
        }

        public static readonly MaxEnumConverter Singleton = new MaxEnumConverter();
    }

    internal class MinElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MinElement) || t == typeof(MinElement?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    if (stringValue == " 0")
                    {
                        return new MinElement { Enum = MinEnum.The0 };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new MinElement { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type MinElement");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (MinElement)untypedValue;
            if (value.Enum != null)
            {
                if (value.Enum == MinEnum.The0)
                {
                    serializer.Serialize(writer, " 0");
                    return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type MinElement");
        }

        public static readonly MinElementConverter Singleton = new MinElementConverter();
    }

    internal class MinEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MinEnum) || t == typeof(MinEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == " 0")
            {
                return MinEnum.The0;
            }
            throw new Exception("Cannot unmarshal type MinEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MinEnum)untypedValue;
            if (value == MinEnum.The0)
            {
                serializer.Serialize(writer, " 0");
                return;
            }
            throw new Exception("Cannot marshal type MinEnum");
        }

        public static readonly MinEnumConverter Singleton = new MinEnumConverter();
    }

    internal class StepElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(StepElement) || t == typeof(StepElement?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    if (stringValue == " 1")
                    {
                        return new StepElement { Enum = StepEnum.The1 };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new StepElement { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type StepElement");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (StepElement)untypedValue;
            if (value.Enum != null)
            {
                if (value.Enum == StepEnum.The1)
                {
                    serializer.Serialize(writer, " 1");
                    return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type StepElement");
        }

        public static readonly StepElementConverter Singleton = new StepElementConverter();
    }

    internal class StepEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(StepEnum) || t == typeof(StepEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == " 1")
            {
                return StepEnum.The1;
            }
            throw new Exception("Cannot unmarshal type StepEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (StepEnum)untypedValue;
            if (value == StepEnum.The1)
            {
                serializer.Serialize(writer, " 1");
                return;
            }
            throw new Exception("Cannot marshal type StepEnum");
        }

        public static readonly StepEnumConverter Singleton = new StepEnumConverter();
    }
}
